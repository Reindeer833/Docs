
                           STD STRING
                           ==========
						   
std:: string is mutable
-----------------------
						   
						   
Constructors:
-------------				
string();
string(const char* );
string (size_t n, char c);


~~~~~~~~~~~~~~~~
Member Functions
~~~~~~~~~~~~~~~~					   

iterators:  myStr.begin()   
            myStr.end()		
						   
c_str()   C-string equivalent
pointer to a constant char.
const : Important!!!
---------------------------

std::string __str ("Hello World!");
char * cstr = new char [str.length()+1];

strcpy (cstr,__str);

Important:  std::string cannot be constructed from nullptr.  So if we have some char* ptr we 
have to check:   if(ptr == nullptr){
		    no new std:: string
		  }

string::npos
------------
Maximum number of chars string can take				  
				  
size_t   length();
------------------
size_t   size();
----------------
Number of bytes in the string


bool empty() const
------------------
If string is empty


char& operator [size_t pos];
---------------------------
char& at(size_t pos) const;
---------------------------
Returns a reference to the character at position pos in the string



const char& back() const;
-------------------------
const char& front() const;
--------------------------
Returns a reference to the last/first character of the string.



string& append (size_t number,char c);
----------------------------------------
mystring.append(1,'x'); //Will append 'x' to the end of the string


string& insert (size_t pos, const char* s);   my_string.insert(0,"abcd");
-------------------------------------------
string& insert (size_t pos, const string& str);
-----------------------------------------------
void insert (iterator p, size_t n, char c); (inserts n copies)
-------------------------------------------
void insert (iterator p, char c); 
-------------------------------------------
string& insert(size_t pos,size_t number,char ch);
----------------------------------------------
Inserts in pos BEFORE character at this pos.

append and insert differs in it that append does not take position parameter.
erase takes position and number of chars but not char value.
erase and insert differ, erase does not have th third param




string& erase (size_t pos = 0, size_t count = npos);   my_string.erase(0,1) 
                                                       deletes 1 char at position 0
----------------------------------------------------
Erases count chars starting at pos. Strings is shorter by erased chars



size_t find (const string& str, size_t pos = 0) const;
------------------------------------------------------
Returns position of substring or npos(=-1)
   if(line.find("home",5) != string::npos) ...;
   (look for "home" starting at position 5)



string substr (size_t pos = 0, size_t count = npos) const;
--------------------------------------------------------
Returns substring with count chars



int compare (const string& str) const;
int compare (const char* s) const;
----------------------------------
Returns 0, <0, >0
If I am comparing std::string to const * char then '\0'
is NOT included in comparing

const char * data();
--------------------
Includes '\0'




string& erase (size_t pos = 0, size_t len = npos);
--------------------------------------------------
mystring.erase(0,1);//Will erase the very first character


With iterator:
iterator erase (iterator first, iterator last);
-----------------------------------------------

iterator erase (iterator itr);
------------------------------



~~~~~~~~~~~~~~~~~~~~
Non-member functions
~~~~~~~~~~~~~~~~~~~~

istream& getline (istream& is, string& str, char delim);
istream& getline (istream& is, string& str);
--------------------------------------------------------
delim is NOT included
does not return \n

Comparing two strings:
----------------------
string aa="abcd";
string bb="ABCD";
if( 0 == memcmp(aa.data(),bb.data(),aa.length() )  ){...} //in string.h Notice:  3 params
         ----------------------------------------
Returns 0 if both strings are the same 

int strcmp(consta char* aa,const char* bb);


std::size_t strlen(const char* str);
------------------------------------
Used for c_str types
Length does not include '\0' char

auto bItr = back_inserter(some_std_string);
Then I can:   *bItr=some_character;

Using strtok
------------
std::string str ("Please split this sentence into tokens");

  char * cstr = new char [str.length()+1];
  std::strcpy (cstr, str.c_str());
  //c_str is constant  I have to copy it into another string
     

  // cstr now contains a c-string copy of str

  char * p = std::strtok (cstr," ");//first time with string
  while (p!=0)
  {
    std::cout << p << '\n';
    p = std::strtok(NULL," ");//second time with NULL
  }

  delete[] cstr;

 


