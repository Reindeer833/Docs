
                CPP std weak_ptr
                ================
	
weak_ptr<T>   templated class

Must be initialized by a shared_ptr
weak_ptr does NOT own object to which it points.

shared_ptr<int> aaa(10);
weak_ptr<int> wp(aaa);

weak_ptr<T> cannot be used directly.  Function lock() will return 
shared_ptr and this shared_ptr can be used.  We have to
check if this shared_ptr is still valid.

if(shared_ptr<int> spi = wp.lock() ){

//   do something with spi

}

// Because shared_ptr objects count as an owner, function lock() locks the owned pointer, 
// preventing it from being released (for at least as long as the returned object does not releases it).


void reset();
//  Reset pointer
//  The object becomes empty, as if default constructed.

bool expired() const noexcept;
// Check if expired
// Returns whether the weak_ptr object is empty or if there are no more shared_ptr in the owner group it belongs to.
// Expired pointers act as empty weak_ptr objects when locked, and thus can no longer be used to restore an owning shared_ptr.
// This function shall return the same as (use_count()==0),

long int use_count() const noexcept;

// Use count returns the number of shared_ptr objects that share ownership over the same pointer as this object.
// Weak_ptr objects in the owning group are not counted.
// If this is an empty weak_ptr, the function returns zero.
