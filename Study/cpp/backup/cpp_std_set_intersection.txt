
			set_intersection
			----------------


set_intersection:
----------------
std::set_intersection(containerA.begin(),containerA.end(),containerB.begin(),containerB.end(),containerResult.inputIter);

container result will contain those elements from containerA 
                      and those elements from containerB which are in both containers.
                      If containerA contains m elements El and containerB n elemenst El
                      then resulting container will contain min(m,n) elements El



BOTH CONTAINERS MUST BE SORTED!!!

This is applied to any container, not only to sets

#include <iostream>
#include <algorithm> // THIS ONE!!
#include <vector>
#include <random>
#include <iterator>


Examples
--------

   vector<int> vA={3,6,6,6,8,9,12};
    vector<int> vB={2,4,6,6,8,9};
    vector<int> vInters(0);

    stable_sort(vA.begin(),vA.end());
    stable_sort(vB.begin(),vB.end());

    set_intersection(vA.begin(),vA.end(),vB.begin(),vB.end(),inserter(vInters,vInters.begin()));


    printVector(vA);
    printVector(vB);
    printVector(vInters);


ContainerA:       3,6,6,6,8,9,12
ContainerB:       2,4,6,6,8,9

Intersection:     6,6,8,9

