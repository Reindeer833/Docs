
			set_symmetric_difference
			------------------------


set_symmetric_difference:
-------------------------
std::set_symmetric_difference(containerA.begin(),containerA.end(),containerB.begin(),containerB.end(),containerResult.inputIter);

container result will contain elements from containerA which are NOT in containerB
                      and elements from containerB which are NOT in containerA
BOTH CONTAINERS MUST BE SORTED!!!

This is applied to any container, not only to sets


#include <iostream>
#include <algorithm> // THIS ONE!!
#include <vector>
#include <random>
#include <iterator>


Examples
--------

    const int aLim=10;
    random_device rde;
    mt19937 mTw(rde());
    uniform_int_distribution<int> uiD(1,aLim);
    auto rnd=bind(uiD,mTw);

    vector<int> vA;
    vector<int> vB;
    vector<int> vDiff;

    for(int ix=0;ix<aLim;++ix){
        vA.push_back(rnd());
        vB.push_back(rnd());
    }
    stable_sort(vA.begin(),vA.end());
    stable_sort(vB.begin(),vB.end());
    set_symmetric_difference(vA.begin(),vA.end(),vB.begin(),vB.end(),inserter(vDiff,vDiff.begin()));



ContainerA:   2 2 4 4 5 6
ContainerB:   2 2 3 4 5 6

Diff:         3 4

