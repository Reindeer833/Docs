

                           STD::allocator
                           ==============
						   


Templated class: allocator<T> 
-----------------------------
std::allocator is used when you want to separate allocation and do construction in two steps.
It will construct raw memory without calling constructor


~~~~~~~~~~~~~~~~
Member Functions
~~~~~~~~~~~~~~~~					   

Constructors
------------
allocator<int> myAllocator; 


myAllocator.allocate(5);
// Used for allocation of memory.

unitialized_copy(begin_source_iter,end_source_iter,starting_dest_pointer);
// Copy values into assign memory

myAllocator.deallocate(starting_dest_pointer,number_of_elements)
// Used for deallocation of memory.

					 
int* arr = myAllocator.allocate(5); 
// Will allocate array of 5 integers
// Notice that ARRAY is constructed!!!
// Even when we have ()  and NOT []
 
 
string* str = myAllocator.allocate(3); 
//------------------------------------
// Allocates space for three strings 
// Notice that ARRAY is constructed!!!
// Even when we have ()  and NOT []


myAllocator.deallocate(str, 3);
//------------------------------------
// Deallocate space for 3 strings 
     

allocator will create array-like memory division // !!!ARRAY!!!
which is accessible by index.

// construct, destroy  deprecated in C++ 20


Four  steps
-----------

1. Create allocator:    std::allocator<string> myAlloc;
2. Allocate memory:     auto rP=myAlloc.allocate(3);
3. Fill in memory:      uninitialized_copy(begin(cS),end(cS),rP );// For array begin iterator is pointer to array
4. Destroy objects in chunks of memory:  myValloc.destroy(pointer_to_memory_chunk);
5. Dealocate memory:      myAlloc.deallocate(rP,3)

//Important:  resulting pointer point 1 past last assigned memory.

Examples:
---------

#include <memory>   //for unitialized_copy

A)  string array
~~~~~~~~~~~~~~~~
    string cS[3]={"Hello C++!","Test!","The third one"};
    std::allocator<string> myAlloc;
    auto rP=myAlloc.allocate(3);
    uninitialized_copy(begin(cS),end(cS),rP );
    cout<<rP[0]<<endl;
    cout<<rP[1]<<endl;
    cout<<rP[2]<<endl;
    myAlloc.deallocate(rP,3);

B)  int array
~~~~~~~~~~~~~
    const int arR[3]={1,2,3};
    std::allocator<int> aCh;
    auto intPtr=aCh.allocate(3);
    uninitialized_copy(begin(arR),end(arR),intPtr ) ;
    cout<<intPtr[0]<<endl;
    cout<<intPtr[1]<<endl;
    cout<<intPtr[2]<<endl;
    aCh.deallocate(intPtr,3);


C)  vector<string>
~~~~~~~~~~~~~~~~~~
    vector<string> vS(5,string("Hello!") );
    auto myValloc=vS.get_allocator();
    auto vP=myValloc.allocate(vS.size());
    std::uninitialized_copy(vS.begin(),vS.end(),vP );
    for(int ix=0;ix<5;++ix){
        cout<<vP[ix]<<endl;
    }
    myValloc.deallocate(vP,5);


Destroying memory
~~~~~~~~~~~~~~~~~
    auto vQ=vP+5;
    while(--vQ != vP){
        myValloc.destroy(vQ);
    }
    myValloc.deallocate(vP,5);
