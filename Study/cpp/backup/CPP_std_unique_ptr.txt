

                           STD::unique_ptr
			   ===============
						   
Smart Pointer
-------------

unique_ptr<T> // Templated

unique_ptr<T> owns the object to which it points.
Only one instance of unique_ptr<T> can point to an object.
The object to which unique_ptr<T> points is destroyed when
  this unique_ptr<T> is destroyed

There is no function to make_unique

~~~~~~~~~~~~~~~~
Member Functions
~~~~~~~~~~~~~~~~					   

Constructors
------------
unique_ptr<T>    u1;// Null unique pointer
unique_ptr<T,D> u2; // Null unique pointer
                    // using custom deleter

unique_ptr<T,D> u3(d); // Null unique pointer
                       // using custom deleter
                       // d must be of type D

unique_ptr<T>   u3(u1);// Error:  No copy constructor
u2 = u1   // Error: No copy constructor


Functions
---------

u = nullptr; // Deletes object to which u pointed and makes u nullptr

u.release(); // Makes u null
             // Release ownership of object it points to
             // Returns pointer to this object



u.reset(); // Reset with no argument will delete object to which smart pointer points

u.reset(aPointer); // Reset with argument will delete object to which smart pointer points
                   // and smart pointer will point to aPointer


u.reset(nullpointer); // Deletes object and sets u to nullptr

When returning unique_ptr from a function, copy is allowed.



