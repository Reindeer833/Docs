
                CPP dynamic_cast
                ================
						   
dynamic_cast<target>(expr) performs a run time cast from expr to target
-------------------------  and validates the cast.
                           expr can be pointer or reference.
                           If cast fails and expression is pointer, then 
                           the resultinp pointer is nullptr.
                           If cast fails and expression is reference, then 
                           we get exception.
                           Important:
                           target   expr    result:  MUST be pointers or references
                  

IMPORTANT
---------
dynamic_cast<T> should be used for polymorphic classes only!!!
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If I have base pointer pointing to derived class and perform dynamic_cast to derived pointer, cast will succeed.
If I have base pointer NOT pointing to derived class and perform dynamic_cast to derived pointer, cast will fail.
Derived pointer can ALWAYS be cast to base pointer.


Example:
--------
*.h:
----
    class Base { public: virtual void f() {} };
    class Derived:public Base{ public: virtual void f() {} };

*.cpp:
------
    Base*   pb = new Base();
    Derived* pd = new Derived();

    pb=dynamic_cast<Base*>(pd);
    assert(pb);//Will pass


*.h
---
   class B1{ public: virtual ~B1(){} };//B1 virtual and all derived classes too
   class D1:public B1{};
   class D2:public D1{};


*.cpp
-----
    B1* b1=new D1();
    assert(dynamic_cast<D2*>(b1));//will fail

    B* bb=new D2();
    assert(dynamic_cast<D1*>(bb));//will pass


    B1  b3=B1();
    B1& b33=b3;

    D2  d3=D2();
    D2& d33=d3;

    d33=dynamic_cast<D2&>(b33); //will fail - exception

    B1& b44=d3;
    d33=dynamic_cast<D2&>(b44); //will fail - exception




