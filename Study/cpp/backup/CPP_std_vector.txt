

                           STD::vector
			   ===========
						   
Sequential Container
--------------------

Vector can grow dynamically.
Vector allows access by index.
Vector allows efficient  removal from the end.
For removal/addition in the middle they perform worse than lists.

~~~~~~~~~~~~~~~~
Member Functions
~~~~~~~~~~~~~~~~					   

Constructors
------------
std::vector<int> first;                                // empty vector of ints
std::vector<int> second (4,100);                       // four ints with value 100
std::vector<int> third (second.begin(),second.end());  // iterating through second
std::vector<int> fourth (third);                       

						   
Iterators
~~~~~~~~~
begin()
end()
cbegin()
cend()
crbegin()
crend()

vector<string>::iterator myIterator;

std::vector<int> vvv(4,12);
vector<string> vs(10,string("Hello World!") );

for(std::vector<int>::iterator it=vvv.begin();it != vvv.end();++it){
   ......
}	

size_type
---------
vector<int>::size_type ix=0;


Size related:
-------------
size_type size();
bool empty();
myVector.resize(25);
    OR
myVector.resize(oldVector.size() );

void clear(); //erases everything

operator[];  //myVect[5]=33;
T& at(size_t n);
T& front(); //will access first element
T& back();//will access last element

void push_back(T& val); 
void pop_back(); // Removes the last element in the vector, reducing the container size by one.

Vector has insert but it is very inefficient
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iterator insert(const_iterator pos, const_val& val);
iterator insert(const_iterator pos, size_type n, const_val& val);

value_type* data();//returns pointer to start of data_array

Vector has erase  but it is very inefficient
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iterator erase (const_iterator position);
iterator erase (const_iterator first, const_iterator last);

while(!myvect.empty()){
    ....
	myvect.pop_back();
}

