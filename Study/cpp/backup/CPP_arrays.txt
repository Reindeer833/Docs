
                CPP ARRAYS
                ==========
In CPP arrays MUST be declared with constant which compiler can determine:

int nnn=10
int iArr[nnn];   //bad!

int iArr[10];// Good

Number of array's element is part of array's type. 

char cArr[10]
cArr is pointer to the first character
*cArr = 'some_char'

auto begItter=begin(cArr);
auto endItter=end(cArr);
//beggining and end iterator 

Arrays hold objects, not references.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 int &myArr[10]= /* ? */;  //Wrong!!

No copy or assignment.
~~~~~~~~~~~~~~~~~~~~~~

int  iArr[10]
int  iArrB[20];

iArrB = iArr;   //Wrong!



Array Pointers
--------------

int *ptrs[10];   //  Array of 10  pointers to integers
int (*ptr)[10];  //  Pointer to array of 10 integers


// Arrays of 10 function pointers
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    typedef void(*fPtr)(); //Here fPtr creates type
    fPtr myPtrs[10];
    myPtrs[0]=testArrays; // assign some function


// Chars are treated differently
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    char ac[] ={"Hello World!"};  // Good
    char bc[3] ={"Hello World!"}; // Bad , array not long enough



//Function pointers
~~~~~~~~~~~~~~~~~~~

    void ( *gtprIf) (double,string);// Pointer to a function


    void ( *ftprIf[10]) (); //Pointer to array of 10 function pointers
    ftprIf[0]=testArrays;



    typedef void (*aaaa) (char); // Proper way
    typedef void (*aaaa) (char) bbb; // NOOO!:


   void ghoo( void (*) (char,string)  );// This is OK as declaration, not definition


Copy algorithm for arrays
~~~~~~~~~~~~~~~~~~~~~~~~~

    int arrA[] = {1,2,3,4,5,6,7,8,9,0};
    int arrB[sizeof(arrA)/sizeof(int)];//sizeof provides size in bytes

    copy(begin(arrA),end(arrA),begin(arrB));

    But I cannot use back_inserter(someArray)

