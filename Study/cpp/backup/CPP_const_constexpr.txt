
                CPP const  constexpr
                ====================

  const
  -----

const guarantees that a program does not change an objectâ€™s value after intialization.
However, const does not guarantee which type of initialization the object undergoes. 

A "const function", denoted with the keyword const after a function declaration, 
makes it a compiler error for this class function to change a member variable of the class.
With the exception of mutable variable
 
However, reading of a class variables is okay inside of the function, 
but writing inside of this function will generate a compiler error.

void moo(int x) const;  //This function can be a class member ONLY!!!
                        // Not a standalone


  constexpr
  ---------
constexpr tells the compiler that this expression results in a compile time constant value, 
so it can be used in places like array lengths, assigning to const variables, etc.

Declaring something as constexpr does not necessarily guarantee that it will be evaluated at compile time.
function declared as constexpr will NOT always be evaluated at compile-time

constexpr void moo(int x);  //It does not need to be member of a class
