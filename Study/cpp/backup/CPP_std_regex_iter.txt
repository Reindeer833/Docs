
                           STD REGEX ITERATOR
                           ==================
						   
Header:  
-------
#include <regex>


Based on sregex_iterator or cregex_iterator


string sStr="The quick brown fox jumps over the lazy dog";
regex re("[^\\W]+");

// constructor
// -----------
auto wordStart=std::sregex_iterator(sStr.begin(),sStr.end(),re);//remember that:  s
/
// arguments:  begin iterator - here to string
//             end iterator
//             regex itself
// 
auto wordEnd = sregex_iterator();  //remember that:  s
// default constructor creates end iterator, the one past the string


Number of matches:

auto nM= std::distance(wordStart,wordEnd);
If I iterate from start to end, dereferenced iterator is smatch

for(auto itR = wordStart;itR != wordEnd;++itR){
        std::smatch sM=*itR;
        cout<<"Found word: "<<setw(15)<<left<<sM.str()<<endl;
}

smatch.str() // returns matched string

using flags
 regex re("[a-z][a-z]+",regex_constants::icase);
