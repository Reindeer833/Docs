
                           TEMPLATES FUNCTIONS
                           ===================
						   
In *.h file - declaration:
--------------------------

(Notice: Passing references)

template <typename K,typename V>
bool findIt(map<K,V>&,K&);

// In *.h file declaration of function findIt uses templates but does not
// have template brackets after function name



In *.cpp file - definition:
---------------------------
(Notice: Passing references)

template <typename K,typename V>
bool findIt(map<K,V>& mpkv,K& aKey){

    for(auto itr=mpkv.begin();itr != mpkv.end();++itr){
        if(itr->first==aKey){
            return true;
        }
    }
    return false;
}
// In *.cpp file definiton of function findIt uses templates but does not
// have template brackets after function name


In *.cpp file - usage:
----------------------

    map<string,int> mpsi;
    mpsi.insert(pair<string,int>(string("aa"),10));
    mpsi.insert(pair<string,int>(string("bb"),20));
    mpsi.insert(pair<string,int>(string("cc"),30));
    mpsi.insert(pair<string,int>(string("dd"),40));

    string aKey=string("cc");
    cout<<"Value for key "<<"cc"<<" exists: "<<findIt<string,int>(mpsi, aKey)<<endl;
	
This will return 1 <=> true	

Notice function call:

findIt<string,int>(mpsi, aKey)

1. Includes bracketed template parameters
2. Reference to map: mpsi
3. Reference to key:  aKey
Because reference is an alias to EXISTING variable, I have to create that variable first:
	string aKey=string("cc");
If I wanted to create the key on fly, like substitute string("abc") as a second param,
I would not be able to use references.	
	




Example:
--------

*.h file:
~~~~~~~~~


template <class T,int aSize=20>
void displArray(AA<T,aSize>&);





*.cp file:
~~~~~~~~~~


template <class T,int aSize=20>
void displArray(AA<T,aSize>& bb){

    for(int ix=0;ix<aSize;++ix){
        cout<<bb[ix]<<" ";
    }
    cout<<endl;
}

