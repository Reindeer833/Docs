

                           STD::map
                           ========
						   


Associative Container
--------------------

Maps are associative containers that store elements formed by a combination of a key value and a mapped value, 
following a specific order.

----------------------
SO MAP STORES PAIRS!!!
----------------------

In a map, the key values are used to sort and uniquely identify the elements. 


 typedef pair<const Key, T> value_type; //DO YOU SEE THAT CONST KEY ???

This though is wrong:      map<pair<const int,string> > abc;  //!!!!WRONG!!!!
 
 Maps are implemented as binary search trees.

 Map does not have push_back so it does not have
   back_inserter

Map constructor has at least two templates.
   
-------------------------------------------------   
***   Iterator is a pointer!   ***
auto iM = someMap.cbegin();
iM is a pointer to a pair

To access values of a pair:
iM->first
iM-second


Surprise:
~~~~~~~~~
    auto lf = [](pair<string,int> pr)->void{
        cout << pr.second<<"\t\t"<<pr.first<<endl;
    };
    for_each(my_map.cbegin(),my_map.cend(),lf);

Here cbegin()   cend()  return iterators and iterators are pointers to pair
but lambda will take directly pairs
^                     ^
|                     |
*** REMEMBER THIS!  ***
-------------------------------------------------   
Map has:   size_type   

map::key_type     type of K
map::mapped_type  type of Mapped type
map::value_type   type of pair    (NOT OF VALUE!!!!)

map::allocator_type   //creates memory for pairs

-------------------------------------------------


IMPORTANT
---------

    map<const string,string> mStr;   //DO YOU SEE THAT CONST KEY ???   
    for(int ix=0;ix <10;++ix){
        string inP=to_string(ix);
        mStr.insert(pair<const string,string>(inP,inP));  //DO YOU SEE THAT CONST KEY ???   
    }
      auto mAll=mStr.get_allocator();                      //you may go with auto
//    pair<const string,string>* allPtr=mAll.allocate(5);  //DO YOU SEE THAT CONST KEY ???   

   
~~~~~~~~~~~~~~~~
Member Functions
~~~~~~~~~~~~~~~~					   


Constructors
------------
std::map<int,int> map;  

//Here I will specify comparator
// As a template:   bool(*)(string,string)
// As a parameter to constructor

std::map<string,string,bool (*)(string,string)> aMap(aCompFn);

Or directly
-----------
std::map<std::string,int> mymap = {
                { "alpha", 0 },
                { "beta", 0 },
                { "gamma", 0 } };



insert
~~~~~~
pair<iterator,bool> insert (const value_type& val);
---------------------------------------------------
auto aP = myMap.insert(somePair);
if(aP.second == false){
   ..........
}

auto aP=myMap.insert(make_pair('a',1) );
//make_pair is not templated



insert multiples
----------------
void insert (InputIterator first, InputIterator last);



Checking if key exists
----------------------
auto an_iterator myMap.find (const key_type& k);
// If key exists I will get iterator which is pointer to the pair containing the key

 if(an_iterator != myMap.end() ){ ... }  // OK, key exists 
                                           // end() ... function

If key exists:  myValue = an_iterator->second;





if(myMap.count(some_key) == 1){  // OK, key exists  Return can be 0 or 1
}


bool empty();
------------
size_t myMap.size();
--------------------

mymap.at(aKey)=aValue;
----------------------
(Will throw exeption if key does not exists)


myMap[akey]
-----------
myValue = myMap[akey];
If k does not match the key of any element in the container, 
the function inserts a new element with that key and returns a reference to its mapped value.
Default constructor is used.



----------------------

Three erase functions:
----------------------
size_type erase (const key_type& k);       //  By key
iterator  erase (const_iterator position); //  By iterator
iterator  erase (const_iterator first, const_iterator last);// By iterator range


Various iterators:
------------------

std::map<char,int>::iterator it=mymap.begin(); end();
                                      cbegin();cend();
				      rbegin();rend();
				      crbegin();crend();
									  
									  

									  
auto ret = mymap.insert ( std::pair<char,int>('a',100) );
if(ret.second == false{ ...this element already existed in the map ...}
// Notice that pair is templated
I can use:  make_par('a',23);//returns proper pair and make_pair is NOT templated


std::map<char,std::string> mymap;
mymap['c']="hello";  //throws exeption if key does not exist
----------------------------------


allocator_type get_allocator();
-------------------------------

std::pair<const char,int>* p;           //allocator will assign memory for pairs
p=mymap.get_allocator().allocate(5);    //allocate array of 5 pairs
mymap.get_allocator().deallocate(p,5);  //return memory

When we are using for_each ... to iterate through map<K,V>, return value 
                 ---------
is value_type or equivalently pair<K,V>
   ---------
It is pair, not pointer to pair.
      ----      ------
So in lambda or a function whose pointer we are using, we operate with:
arg.first
arg.second

template <typename K,typename V>
void cpMaps(map<K,V>& aA,multimap<V,K>& bB){
    for_each(aA.begin(),aA.end(),
        [&](pair<K,V> prkv){// in lambda argument I am using pair<K,V>
            bB.insert(pair<V,K>(prkv.second,prkv.first) );
        }
    );
}




Example:
~~~~~~~~

void testMapAllocator(){
    map<const string,string> mStr;   //const key
    for(int ix=0;ix <10;++ix){
        string inP=to_string(ix);
        mStr.insert(pair<const string,string>(inP,inP));    //const key
    }
    auto mAll=mStr.get_allocator();
    pair<const string,string>* allPtr=mAll.allocate(5);    //const key
// Or: auto allPtr=mAll.allocate(5);
    
    uninitialized_copy(mStr.begin(),mStr.end(),allPtr);
    for(int ix=0;ix < 5;++ix){
          cout<<(allPtr+ix)->first<<"  "<<(allPtr+ix)->second<<endl;
    }
}

Example of comparator function
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

class Abc{
    public:
        Abc(long x){
            mX=x;
        }
        long mX;

};

bool aComp(Abc a,Abc b){
    return a.mX<b.mX;
}

  map<Abc,long long,bool(*)(Abc,Abc)> mP(&aComp);


