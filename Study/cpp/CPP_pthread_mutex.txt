
                           CPP PTHREAD
                           ==========
						   

						   
        pthread ... posix thread
		
	To create a mutex	
        -----------------
	
       Declare:          pthread_mutex_t aMx;
       Initialize:       pthread_mutex_init(&aMx,nullptr);
       Use mutex:        pthread_mutex_lock(&aMx);
                         pthread_mutex_unlock(&aMx);
       Destroy mutec:    pthread_mutex_destroy(&aMx);
       Exit in handler:  pthread_exit(nullptr);

      int  pthread_self() // return ID of currently executing thread

      Useful function:  this_thread::sleep_for(chrono::milliseconds(100) );
      Must include:    #include <thread>

	        
    Example:

        #include <stdio.h>
	#include <stdlib.h>
	#include <pthread.h>
        #include <thread>
	#include <iostream>

        pthread_mutex_t aMx;

	void* aWorker(void* argS){
		for(int ix=0;ix<4;++ix){
			if(ix%2)
			    pthread_mutex_lock(&aMx);
			cout<<(const char *)argS<<endl;
			this_thread::sleep_for(chrono::milliseconds(500));
			if(ix%2)
			    pthread_mutex_unlock(&aMx);
			}
		 pthread_exit(nullptr);
	 }


	void testMutex(){

	    pthread_mutex_init(&aMx,nullptr);

	    int tId1,tId2;

	    pthread_t tH1,tH2;

	    tId1=pthread_create(&tH1,nullptr,aWorker,(void*)"Running Thread1");
	    tId2=pthread_create(&tH2,nullptr,aWorker,(void*)"Running Thread2");

	    pthread_join(tH1,nullptr);
	    pthread_join(tH2,nullptr);

	    pthread_mutex_destroy(&aMx);
	    pthread_exit(nullptr);

	}

	//
	// Add linker library:   pthread in Build options/Linker settings
	// In make file:  -lpthread
	// Build generated compiler line:  
	   g++ -Wall -fexceptions -g -std=c++11 -g  
	      -c /home/dks0285721/Development/cpp/codeblocks/PthreadsA/main.cpp 
	      -o obj/Debug/main.o 
		  
	// Build generated linked line:  
	   g++  -o bin/Debug/PthreadsA   obj/Debug/main.o   -lpthread
	//
      int  pthread_self() // return ID of currently executing thread
