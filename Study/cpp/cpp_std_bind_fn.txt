
			bind
			------

We can bind constant arguments to a function and rearange the rest of argumenns

#include <functional>


using namespace std;
using std::placeholders;


void myFn(int x,int y,int x, int w);

Now let's suppose that x nearly always =10 and w nearly always equals 0/


auto gbFoo=bind(myFn,10,_2,_1,0);

This means:  Function call gbFoo(100,200) will be translated into:
     myFn(10,200,100,0)

Positional parameters _1,_2,_3,... mark position of arguments in bound function: _1 refers to first argument, _2 refers to seconds argument... 
Their position in bind call determines where in original function these parameters will go.
  
 auto gbFoo= bind(myFn,10,_2,_1,0) :   Second argument in gbFoo will go to second position of myFn
                                       First argument in gbFoo will go to the third position of myFn

Positional arguments _1,_2,_3 start from one and there is no skipping like:  _1,_3  (NO!)
The largest value of _n corresponds to n=number of params of resulting function

In call:   auto gbFoo=bind(myFn,10,_2,_1,0);
myFn MUST be copyable object so something like:  bind(myFoo,someOstream,_1,_2) is NOT posssible
                                                 ostreams are NOT copyable

But this would be possible:    bind(myFoo,ref(someOstream),_1,_2)
   ref will return refernce to a copyable object.


We can use bind in algorithms:
------------------------------
auto anIter = find_if(coll.begin(),coll.end(),bind(isLongerThenValue, 10,_1) );

where:

bool isLongerThenValue(int val,string stR){
	return str.length > val;
}


