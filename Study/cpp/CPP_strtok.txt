


                           STRTOK
                           ======
						   
char * strtok ( char * firstStr, const char * allDelimiters );
strtok will split string into tokens. Tokens are strings separated
       by delimiters.


Header:  
-------
#include <string.h>



Usage:
------

firstStr must NOT be pointer to a const char as allDelimiters.
So:   result of std::string.c_string() can NOT be used here
      because std::string.c_string() returns pointer to a const string.
	  
Second argument:  const string allDelimiters can contain all delimiters used to split
   the string, example:  " ;.,!"

First time I will call strtok with original string as first param:  strtok (firstStr,allDelimiters); 
Following calls use nullptr as first param:  strtok (nullptr,allDelimiters);
Function iterations return pointer to the first char of token or nullptr.


char firstStr[] = "This has been a long day."
auto pch = strtok (firstStr,allDelimiters);  //first call
while (pch != nullptr)
{
	cout<<pch<<endl;  //Token from first call - if it exists
	pch = strtok (nullptr,allDelimiters);  //Next call - may return nullptr
}


Because strtok may return nullptr I have to check always if 
pch is NOT nullptr.   If I feed nullptr to std:: string constructor
then I will get exception.


