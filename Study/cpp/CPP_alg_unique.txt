


                           ALGORITHMS:  unique
			   ===================

auto end_unq = unique(iter_start,iter_end);

// end_unq points to firs non-unique element
// end_unq and past:  these elemnts are undefined, there can be garbage
// unique must be preceded by sort


*.h file
--------
#include <algorithm>
#include <numeric>
#include <random>
#include <functional>
#include <vector>



*.cpp file
----------

    const int aLim=5;
    vector<int> aVect;
    for(int ix=0;ix < aLim;++ix){
        *back_inserter(aVect)=rnd();
    }
    stable_sort(aVect.begin(),aVect.end(),
        [](int aa,int bb)->bool{
            if(aa < bb)return true;
            return false;
        }
    );

    auto end_unq=unique(aVect.begin(),aVect.end());
  // what is end_unq and past is undefined

    aVect.erase(end_unq,aVect.end());
---------------------------------------
bool compInt(int a,int b){

    if( a< b){
        return true;
    }else{
        return false;
    }
}
